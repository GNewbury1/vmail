use Qpsmtpd::Constants;
use Qpsmtpd::DSN();
use Socket;

my %CONFIG_FIELDS = map { $_ => 1 } qw(
);

my %CONFIG_FIELDS_EMPTY = map { $_ => 1 } qw(
);

my %CONFIG_FIELDS_DEFAULT =
(
);

sub init {
	my ($self, $qp) = @_;
	$self->isa_plugin("vmail/common");
	$self->vm_debug;
	$self->SUPER::init($qp);
}

sub vm_init_config
{
	 my ($self, $config_fields, $config_fields_empty, $config_fields_default)  = @_;
	 %$config_fields         = %CONFIG_FIELDS;
	 %$config_fields_empty   = %CONFIG_FIELDS_EMPTY;
	 %$config_fields_default = %CONFIG_FIELDS_DEFAULT;
}

sub vm_valid_config
{
	my ($self) = @_;
	my $config  = $self->vm_config();
}

sub hook_connect {
	my ($self,$transaction,%args) = @_;
	my $remote = lc $self->qp->connection->remote_ip;
	my @args = ($remote);

	# Check the host via vmaild
	my $result = $self->vm_call("core.check_host", $remote);

	# We haven't received anything back so decline
	return $self->vm_declined unless $result;

	
	my $action = $result->[0];
	if ($action) {
		$self->log(LOGINFO, "Sending $action to $remote");
	}

	my $const = Qpsmtpd::Constants::return_code($action) || DECLINED;
	return ($const, $result->[1]);
}

# vim: ft=perl

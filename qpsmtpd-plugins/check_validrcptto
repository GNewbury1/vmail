use Qpsmtpd::DSN();

use constant VALID             => 0;
use constant NOT_FOUND         => 1;
use constant USER_DISABLED     => 2;
use constant DOMAIN_DISABLED   => 3;
use constant USER_OVER_QUOTA   => 4;
use constant DOMAIN_OVER_QUOTA => 5;
use constant USER_NON_EXISTANT => 6;

sub init
{
	my ($self, $qp) = @_;
	$self->isa_plugin("vmail/common");
	$self->vm_debug;
	$self->SUPER::init($qp);
}

sub vm_init_config
{
    my ($self, $config_fields, $config_fields_empty, $config_fields_default)  = @_;
    %$config_fields         = ();
    %$config_fields_empty   = ();
    %$config_fields_default = ();
}

sub hook_rcpt {
	my ($self, $transaction, $recipient) = @_;
	my $user        = lc $recipient->user;
	my $host        = lc $recipient->host;
	my $delivery    = "$user\@$host";

	my $i = 0;
	while ($i++ < 3) {
		$self->vm_exec("core.is_validrcptto", $delivery);
		$self->vm_last_error or last
	}
	$self->vm_last_error and return $self->vm_denysoft_error();

	# Grab the variables from the result.
	my $result = $self->vm_result();
	my $exit_code = @$result[0];
	my $rcpt_type = @$result[2];

	$self->log(LOGINFO, "Receipient type: $rcpt_type");

	if ($exit_code == VALID) {
		return (OK);
	}

    if ($exit_code == USER_NON_EXISTANT) {
        return Qpsmtpd::DSN->addr_bad_dest_mbox("No such user by the name $delivery.");
    }

	# This is when the connection to the database failed
	if ($exit_code == 255) {
		return Qpsmtpd::DSN->sys_unspecified("Unable to check address, try again later");
	}

	# This is the exit code when the account is disabled
	if ($exit_code == USER_DISABLED) {
		return Qpsmtpd::DSN->mbox_disabled;
	}

    if ($exit_code == DOMAIN_DISABLED) {
        return Qpsmtpd::DSN->mbox_disabled;
    }

	if ($exit_code == USER_OVER_QUOTA) {
		return Qpsmtpd::DSN->mbox_full("User over quota");
	}

	if ($exit_code == DOMAIN_OVER_QUOTA) {
		return Qpsmtpd::DSN->mbox_full("Domain over quota");
	}

	# This means that it is either a local address or has auth'd in which case.
	if ($self->qp->connection->relay_client) {
		return (OK);
	}

	return (DECLINED);
}

# vim: ft=perl

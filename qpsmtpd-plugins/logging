sub init {
	my ($self, $qp) = @_;
	$self->isa_plugin("vmail/common");
	$self->vm_debug;
	$self->SUPER::init($qp);
}

sub register {
	my ($self, $qp, %args) = @_;

	my $loglevel = $args{loglevel};

	$self->{_level} = LOGWARN;
	if (defined($loglevel)) {
		if ($loglevel =~ /^\d+$/) {
			$self->{_level} = $loglevel;
		} else {
			$self->{_level} = log_level($loglevel);
		}
	}
	$self->{_transaction} = 0;

	$self->SUPER::init($qp, $loglevel);
}

sub vm_init_config {
	my ($self, $config_fields, $config_fields_empty, $config_fields_default)  = @_;
	%$config_fields         = ();
	%$config_fields_empty   = ();
	%$config_fields_default = ();
}

# We use hook_logging to create the connection entry as well as adding the
# log entries to the database.
sub hook_logging {
	my ($self, $transaction, $trace, $hook, $plugin, @log) = @_;

	# Don't log your own log enries! 
	return DECLINED if defined $plugin and $plugin eq $self->plugin_name;

	# Return if we haven't initialised yet
	return DECLINED if not $self->{_level};

	# Return if the level is above our log level
	return DECLINED if ($trace > $self->{_level});

	# We don't care if there isn't a connection in progress
	return DECLINED if not $self->qp->connection->remote_ip;

	my $cnx = $self->qp->connection;
	my $tnx = ($cnx->{_transactions}) ? scalar @{$cnx->{_transactions}} : 0;

	push @{ $cnx->{_log} }, [$tnx, $trace, $hook, $plugin, join(' ', @log)];

	return DECLINED;
}

# Used to track any DENYs sent to recipients
sub hook_rcpt {
	my ($self, $transaction, $recipient, %args) = @_;
	$transaction->notes('hook', 'rcpt');
	$transaction->notes('rcpt_to', $recipient);
	return DECLINED;
}

# Used to track any DENYs sent by spam/virus scanners
sub hook_data_post {
	my ($self, $transaction) = @_;
	$transaction->notes('hook', 'data_post');
	return DECLINED;
}

# Check to see if the message or recipient is bad
sub hook_deny {
	my ($self, $transaction, $prev_hook, $return, $return_text) = @_;

	if ($transaction->notes('hook') eq 'rcpt') {
		my $bad_rcpts = $transaction->notes('bad_rcpts') || ();
		my $recipient = $transaction->notes('rcpt_to');
		push(@$bad_rcpts, [lc $recipient->address, $return_text]);
		$transaction->notes('bad_rcpts', $bad_rcpts);
		$transaction->notes('rcpt_to', undef);
	} elsif ($transaction->notes('hook') eq 'data_post') {
		$transaction->notes('denied', $return_text);
	}

	# reset the current hook to avoid any mistaken handling
	$transaction->notes('hook', undef);
	
	return DECLINED;
}

# Clear any good recipients
sub hook_ok {
	my ($self, $transaction, $prev_hook, $return, $return_text) = @_;

	return DECLINED if $return == DECLINED;
	return DECLINED if ($transaction->notes('hook') != 'rcpt');

	# Unset the stored address as it is now valid.
	$transaction->notes('rcpt_to', undef);

	return DECLINED;
}

# We use hook_reset_transaction to update the transaction entry with any
# additional information
sub hook_reset_transaction {
	my ($self, $transaction) = @_;

	my $cnx            = $self->qp->connection;
	my $rcpt_count     = length($transaction->recipients);
	my $bad_rcpt_count = length($transaction->notes('bad_rcpts'));

	# We only want to log transactions that had recipients
	if ($rcpt_count == 0 && $bad_rcpt_count == 0) {
		return DECLINED;
	}
	
	# Gather additional information about the transaction
	my $sender         = ($transaction->sender) ? lc $transaction->sender->address : undef;

	my $subject = ($transaction->header) ? $transaction->header->get('Subject') : undef;
	my $size           = $transaction->data_size || undef;
	my $message        = $transaction->notes('denied');
	my $success        = ($message) ? 0 : 1;
	my $transaction_id = $transaction->notes('id');

	if (not $size) {
		$subject = undef;
		$sender = undef;
	} else {
		$subject =~ s/\n$//g;
	}

	# Add all the good recipients to the transaction
	my @recipients = ();
	foreach my $rcpt ($transaction->recipients) {
		push(@recipients, [lc $rcpt->address, 1, '']);
	}

	# Add all the bad recipients to the transaction
	my $bad_rcpts = $transaction->notes('bad_rcpts');
	if ($bad_rcpts) {
		while (scalar(@$bad_rcpts) > 0) {
			my $bad_rcpt = shift(@$bad_rcpts);
			push(@recipients, [$bad_rcpt->[0], 0, $bad_rcpt->[1]]);
		}
	}

	push(@{$cnx->{_transactions}},
		[$sender, $size, $subject, $success, $message, \@recipients]);

	return DECLINED;
}

# We use hook_post_connection to update the connection entry with some
# additional information.
sub hook_post_connection {
	my $self = shift;
	my $cnx          = $self->qp->connection;
	my $remote_ip    = $cnx->remote_ip;
	my $relay_client = $cnx->relay_client || 0;
	my $tls          = $cnx->notes('tls_enabled') || 0;
	my $user         = $cnx->notes('authuser');

	# Add all the logging information about this connection to the database
	$self->vm_call('qpsmtpd.log_connection', $remote_ip, $user,
		$relay_client, $tls, $cnx->{_transactions}, $cnx->{_log});

	return DECLINED;
}

# vim: ft=perl

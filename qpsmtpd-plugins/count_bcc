use Mail::Address;
use Qpsmtpd::DSN();

sub init {
	my ($self, $qp) = @_;
	$self->isa_plugin("vmail/common");
	$self->vm_debug;
	$self->SUPER::init($qp);
}

sub register {
	my ($self, $qp, %arg) = @_;
	$self->{_bcc_count} = $arg{count};
}

sub vm_init_config
{
    my ($self, $config_fields, $config_fields_empty, $config_fields_default)  = @_;
    %$config_fields         = ();
    %$config_fields_empty   = ();
    %$config_fields_default = ();
}

sub vm_valid_config
{
    my ($self) = @_;
    my $config  = $self->vm_config();
}

sub hook_data_post {
	my ($self, $transaction) = @_;

	my $sender = lc $transaction->sender()->address();
	return (DECLINED) if $self->vm_call("core.check_whitelist", $sender);

    my $remote = lc $self->qp->connection->remote_ip;
	return (DECLINED) if $self->vm_call("core.check_whitelist", $remote);

	# Get the recipient count.
	my $rcpt_count = scalar($transaction->recipients());

	# Get the number of recipients that are declared in the email
	my $headers = $transaction->header();
	my $to_count = 0;
	if ($headers->get('To') !~ /undisclosed-recipients:/) {
		$to_count = scalar(Mail::Address->parse($headers->get('To')));
	}
	my $cc_count = scalar(Mail::Address->parse($headers->get('Cc')));

	my $bcc_count = $rcpt_count - ($to_count + $cc_count);
	if ($bcc_count >= $self->{_bcc_count}) {
		my $msg = "You are sending a message with $bcc_count blind recipients, please contact support\@ukplc.net if this is a legitimate message";
		return (DENYSOFT, $msg);
	}

	return (DECLINED);
}

# vim: ft=perl

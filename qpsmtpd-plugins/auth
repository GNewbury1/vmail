#!/usr/bin/perl -w

=head1 NAME

auth - SMTP AUTH module using a database

=head1 SYNPOSIS

=head1 AUTHOR

Copyright 2010 Damien Churchill <damien.churchill@ukplc.net>

This software is free software and may be distributed under the same terms
as qpsmtpd itself.

=head1 VERSION

Version 0.1

=cut

use constant SMTP_PORT => getservbyname("smtp", "tcp") || 25;
use constant SSMTP_PORT => getservbyname("ssmtp", "tcp") || 465;

my %CONFIG_FIELDS = map { $_ => 1 } qw( 
);

my %CONFIG_FIELDS_EMPTY = map { $_ => 1 } qw( 
);

my %CONFIG_FIELDS_DEFAULT =
(
);

sub init {
	my ($self, $qp) = @_;
	$self->isa_plugin("vmail/common");
	$self->vm_debug;
	$self->register_hook("auth-plain", "vm_auth_hook");
	$self->register_hook("auth-login", "vm_auth_hook");
	$self->register_hook("auth-cram-md5", "vm_auth_hook");
	$self->SUPER::init($qp);
}

sub vm_init_config
{
	my ($self, $config_fields, $config_fields_empty, $config_fields_default)  = @_; 
	%$config_fields         = %CONFIG_FIELDS;
	%$config_fields_empty   = %CONFIG_FIELDS_EMPTY;
	%$config_fields_default = %CONFIG_FIELDS_DEFAULT;
}

sub vm_valid_config
{
	my ($self) = @_; 
	my $config  = $self->vm_config();
}

sub vm_auth_hook
{
	my ($self, $transaction, $method, $user, $passClear, $passHash, $ticket) = @_;

	if (
		(defined $passClear and
			$self->vm_call("core.authenticate", $user, $passClear)) or

		(defined $passHash and
			$self->vm_call("core.authenticate_cram", $user, $passHash, $ticket))) {

		my $client_ip = lc $self->qp->connection->remote_ip;
		$self->qp->connection->notes("authuser", $user);

		$self->vm_call("core.last_login", $user, "smtp", $client_ip);
		return (OK);
	}

	return (DENY);
}

#
#--tab=3	---	---
#

=head1 NAME vmail/common

vmail/common - common methods for the vmail plugin suite

=head1 VERSION 2007.1

=head1 DESCRIPTION

This is the base class of all plugins in the database plugin suite.

All other plugins inherit methods from here to connect and close the database
connection, configuration validation, SQL commands, record or notes handling
and managing errors or return values etc.

=head1 REQUIREMENTS

B<db/common> requires the Perl modules

 DBI
 Data::Dumper
 Date::Format
 Mail::Header
 Qpsmtpd::Address
 Qpsmtpd::Transaction
 Sys::Hostname

It's tested with qpsmtpd 0.32, exim as local queue manager and
MySQL as database.

=cut

use Data::Dumper();
use Date::Format();
use IO::Socket;
use JSON;
use Mail::Header ();
use Net::SMTP;
use Qpsmtpd::Address ();
use Qpsmtpd::Transaction ();
use Sys::Hostname qw(hostname);

=head1 CONSTANTS

=head2 Notes

The following constants are defined for use with C<< qpsmtpd->connection->notes >>,
please take care when defining new ones locally. They are used in
upper and lower case! Hopefully they won't interfere with other
note-keys.

They are only used in this package and aren't exported. Please don't
set the notes directly, better use the access methods provided by this
class.

=over

=item * VM_DBH

Stores the database connection handle. See L<"vm_open"> and L<"vmail_close">.

=item * VM_RESULT

Stores the result from a RPC call. See L<"vm_result">.

=item * VM_DEFERRED

Stores a flag about a deferred action, e.g. "defer greylisting from C<hook_rcpt> until C<hook_data_post>".
See L<"vm_deferred">.

=item * VM_NOTIFY

Stores informations about notifying in case of errors. See L<"vm_notify">.

=item * VM_LAST_ERROR

Stores the last error message. See L<"vm_last_error">.

=back

=head2 Texts

These constants are only used in this package and aren't exported.

=over

=item * VM_LATER

Provides the text I<Internal error - try later>. See L<"vm_denysoft"> and L<"vmail_denysoft_error">.

=item * VM_ERROR

Provides the text I<Unknown Error>. See L<"vm_error"> and L<"vm_die">.

=back

=cut

use constant VM_RO_DBH		=> 'vm_ro_dbh';
use constant VM_RW_DBH		=> 'vm_rw_dbh';
use constant VM_RESULT		=> 'vm_result';

use constant VM_SOCK        => 'vm_sock';
use constant VM_CALL        => 'vm_call';

use constant VM_DEFERRED	=> 'vm_deferred';
use constant VM_NOTIFY		=> 'vm_notify';
use constant VM_LAST_ERROR	=> 'vm_last_error';

use constant VM_LATER		=> 'Internal error - try later';
use constant VM_ERROR		=> 'Unknown Error';

=head1 CONFIGURATION

None. And no entry in C</etc/qpsmtpd/plugins> for B<db/common>.

All other database plugins must follow the basic plugin C<db/base> - e.g.:

 db/base
 db/relay
 db/user
 db/greylist

They have all there own configuration files named C</etc/qpsmtpd/vm_base>, C</etc/qpsmtpd/vmail_user> etc.

=head1 INHERITANCE

A skeleton for a plugin using the database suite looks like this:

   # File: db/myplugin
   #
   # Please note the naming convention to inhibit config interference.
   #
   # The following expects only the line
   #
   #   myplugin_required_field = some_value
   #
   # in the config file vm_myplugin.

   my %CONFIG_FIELDS = map { $_ => 1 } qw(
      myplugin_required_field
      myplugin_other_field
      myplugin_emtpy_field
   );

   my %CONFIG_FIELDS_EMPTY = map { $_ => 1 } qw(
      myplugin_emtpy_field
   );

   my %CONFIG_FIELDS_DEFAULT =
   (
      myplugin_other_field   => 42
   );

   sub init
   {
      my ( $self, $qp )   = @_;

      $self->isa_plugin ( "db/common" );

      $self->vm_debug;

      $self->SUPER::init ( $qp );
   }

   sub vm_init_config
   {
      my ( $self, $config_fields, $config_fields_empty, $config_fields_default )   = @_;

      %$config_fields         = %CONFIG_FIELDS;
      %$config_fields_empty   = %CONFIG_FIELDS_EMPTY;
      %$config_fields_default = %CONFIG_FIELDS_DEFAULT;
   }

   sub vm_valid_config
   {
      my ( $self )   = @_;

      my $config   = $self->vm_config();

      if ( $config->{myplugin_other_field} != 42 )
      {
         my $text   = "Bad param: myplugin_other_field" . $self->vm_dump ( $config, '*config' );

         $self->vm_die ( $text );
      }

      #   more checks...
   }

   sub hook_rcpt
   {
      #   ...
   }

   sub hook_data_post
   {
      #   ...
   }

=cut

=head1 CONSTRUCTOR METHODS

=head2 init

B<Call: $self-E<gt>init ( $qp )>

=over

=item * C<$qp>

Qpsmtpd object

=back

Called from qpsmtpd on startup.

Loads the config for the inheriting plugin, calls L<"vm_init_config"> and L<"vmail_check_config">, stores the config
items and calls L<"vm_valid_config">.

B<On errors in> L<"vm_check_config"> B<or> L<"vmail_valid_config"> B<qpsmtpd won't start>.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub init
{
	my ($self, $qp)	= @_;
	$self->vm_debug;
	$self->vm_close;

	my $config_fields				= {};
	my $config_fields_empty		= {};
	my $config_fields_default	= {};

	$self->vm_init_config($config_fields, $config_fields_empty, $config_fields_default);

	my $config			= $self->vm_config();

	my $plugin_name	= $self->plugin_name;
	my $config_file	= $plugin_name;

	$config_file		=~ s/::/_/;

	my $config_local	= { map { split /\s*=\s*/, $_, 2 } $self->qp->config ( $config_file ) };

	$self->vm_check_config	( $config_local, $config_fields, $config_fields_empty, $config_fields_default );

	%$config	=
	(
		%$config,
		%$config_local,
	);

	$self->vm_valid_config();
}

=head2 vm_init_config

I<ABSTRACT>

B<Call: $self-E<gt>vm_init_config ( $config_fields, $config_fields_empty, $config_fields_default )>

=over

=item * C<$config_fields, $config_fields_empty, $config_fields_default>

Empty references to hashes

=back

Called from L<"init"> on startup I<before> L<"vm_check_config">.

B<Must be overwritten to provide the local config structures>. See L<"INHERITANCE">, how.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_init_config
{
	my ($self, $config_fields, $config_fields_empty, $config_fields_default)	= @_;
	my $text = "Abstract method " . __PACKAGE__ . '::vm_init_config called';
	$self->vm_die($text);
}

=head2 vm_check_config

B<Call: $self-E<gt>vm_check_config ( $config, $config_fields, $config_fields_empty, $config_fields_default )>

=over

=item * C<$config>

Reference to the raw config hash just read

=item * C<$config_fields, $config_fields_empty, $config_fields_default>

References to hashes (filled by L<"vm_init_config">)

=back

Called from L<"init"> on startup I<after> L<"vm_init_config"> and I<before> L<"vmail_valid_config">.

Sets defaults and checks for missing, unknown or empty config parameters.

Calls L<"vm_die"> on errors. Do not overwrite, use L<"vm_valid_config"> instead.

B<On errors in> L<"vm_check_config"> B<or> L<"vmail_valid_config"> B<qpsmtpd won't start>.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_check_config
{
	my ($self, $config, $config_fields, $config_fields_empty, $config_fields_default) = @_;

	my @fields  = ();
	my @bad     = ();

	foreach ( keys %$config_fields_empty )
	{
		$config->{$_}	||= '';
	}

	foreach ( keys %$config_fields_default )
	{
		$config->{$_}	||= $config_fields_default->{$_};
	}

	foreach ( sort keys %$config_fields )
	{
		push @fields, $_		unless $config_fields_empty->{$_};
	}

	if ( @bad = grep { ! exists $config->{$_} } @fields )
	{
		my $text	= "Missing config param(s): " . join (',', @bad ) . $self->vm_dump ( $config, '*config' );

		$self->vm_die ( $text );
	}

	if ( @bad = grep { ! exists $config_fields->{$_} } sort keys %$config )
	{
		my $text	= "Unknown config param(s): " . join (',', @bad ) . $self->vm_dump ( $config, '*config' );

		$self->vm_die ( $text );
	}

	if ( @bad = grep { ! $config->{$_} } @fields )
	{
		my $text	= "Empty param(s): " . join (',', @bad ) . $self->vm_dump ( $config, '*config' );

		$self->vm_die ( $text );
	}
}

=head2 vm_valid_config

B<Call: $self-E<gt>vm_valid_config ()>

Called from L<"init"> on startup I<after> L<"vm_check_config">.

Does nothing and can be overwritten to provide more config checks.
The config is already stored and can be fetched with

	my $config	= $self->vm_config();

Please follow the policy of the database plugin suite and call L<"vm_die"> on config errors, so that:

B<On errors in> L<"vm_check_config"> B<or> L<"vmail_valid_config"> B<qpsmtpd won't start>.
See L<"INHERITANCE">, how.

=cut

sub vm_valid_config {}

=head1 DATABASE METHODS

=head2 vm_open

B<Call: $self-E<gt>vm_open ()>

Opens the database connection.

Tries to get the handle from C<< qpsmtpd->connection->notes >> ( L<VM_DBH|"CONSTANTS"> ).

Calls L<"vm_connect">, if the handle is C<undef> and stores the result.

B<Returns:>

the database handle	on success.
C<undef>	on error.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_open
{
	my ($self) = @_;
	my $sock = $self->qp->connection->notes(VM_SOCK);
	return $sock if $sock;

	$sock = $self->vm_connect(VM_SOCK);
	$self->qp->connection->notes(VM_SOCK, $sock);
	$self->qp->connection->notes(VM_CALL, 1);
	return $sock;
}

=head2 vm_connected

B<Call: $self-E<gt>vm_connected()>

Returns true if connected to vmaild else false

=cut

sub vm_connected
{
	my ($self) = @_;
	my $sock = $self->qp->connection->notes(VM_SOCK);
	return 1 if $sock;
	return 0;
}

=head2 vm_connect

B<Call: $self-E<gt>vm_connect ()>

Connects to the database described by the config of L<dbE<47>base|"vm_base.shtml#CONFIGURATION">.

B<Returns:>

the database handle	on success.
C<undef>	on error, which is logged by L<"vm_error">.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_connect
{
	my ($self) = @_;
	my $config = $self->vm_config();

	my $sock = new IO::Socket::UNIX(Peer => $config->{sock},
		Type => SOCK_STREAM) or $self->vm_error("Can't connect to socket: $!");


	return $sock;
}

=head2 vm_close

B<Call: $self-E<gt>vm_close ()>

Closes an open database connection.

Tries to get the handle from C<< qpsmtpd->connection->notes >> ( L<VM_DBH|"CONSTANTS"> ) to disconnect.

B<Returns:>

1	on success.
0	if connection was not open.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_close
{
	my ($self) = @_;

	my $sock = $self->qp->connection->notes(VM_SOCK);
	return 0 unless $sock;

	$sock->shutdown(2);
	$self->qp->connection->notes(VM_SOCK, undef);
	return 1;
}

=head2 vm_exec

B>Call: $self-E<gt>vm_exec ( $method [, @params ])>

=over

=item * C<$method>

String, The method to call

=item * C<@params>

Array containing optional parameters

=item * C<%kwargs>

Hash containing optional parameters

=back

Executes the method given in C<$method>

=cut


sub vm_exec
{
	my ($self, $method, @params, %kwargs) = @_;

	# Wipe the results from any previous call
	$self->vm_result(undef);
	$self->vm_last_error(undef);

	# Open the socket to vmaild
	my $sock = $self->vm_open or return;

	# Build the request up
	my $call_id = $self->qp->connection->notes(VM_CALL);
	my %request = (
		id     => $call_id,
		method => $method,
		params => \@params,
		kwargs => \%kwargs
	);
	$self->qp->connection->notes(VM_CALL + 1);

	# Send the request to vmaild
	$sock->send(to_json(\%request) . "\n");

	# Receive back the response
	my $buf;
	$sock->recv($buf, 4096);
	my $result = from_json($buf);

	if (not $result) {
		$self->vm_error("Unable to parse result");
	} elsif ($result->{error}) {
		$self->vm_error($result->{error});
	} else {
		$self->vm_result($result->{result});
	}
}

=head2 vm_call

B<Call: $self-E<gt>vm_call ( $method [, @params ])>

=over

=item * C<$method>

String, The method to call

=item * C<@params>

Array containing optional parameters

=item * C<%kwargs>

Hash containing optional parameters

=back

Executes the method given in C<$method>.

=cut

sub vm_call
{
	my ($self, $method, @params, %kwargs) = @_;

	$self->vm_exec($method, @params, %kwargs);

	# Check for an error
	$self->vm_last_error and return undef;

	return $self->vm_result;
}

=head1 ACCESSOR METHODS

=head2 vm_config

B<Call: $self-E<gt>vm_config ( [ $key [, $value ] ] )>

=over

=item * C<$key>

String

=item * C<$value>

Any value

=back

Accessor for the config hash stored as object attribute.

Stores the new value if C<$key> and C<$value> are given.

B<Returns:>

a reference to the config hash	if no C<$key> is given.
the stored value	if C<$key> is given.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_config
{
	my $self = shift;
	my $key = shift;

	$self->{_vm_config}	||= {};

	$key or return $self->{_vm_config};

	@_ and $self->{_vm_config}->{$key} = shift;

	$self->{_vm_config}->{$key};
}

=head2 vm_result

B<Call: $self-E<gt>vm_result ( [ $result ] )>

=over

=item * C<$result>

Reference to a hash

=back

Accessor for the current user hash stored in C<< qpsmtpd->connection->notes >> ( L<VM_RESULT|"CONSTANTS"> ).

Stores the new hash if C<$result> is given.

B<Returns:>

a reference to the old hash	if no C<$result> is given.
the new hash	if C<$result> is given.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_result
{
	my $self = shift;
	@_ and $self->qp->connection->notes(VM_RESULT, shift);
	return $self->qp->connection->notes(VM_RESULT);
}

=head2 vm_deferred

B<Call: $self-E<gt>vm_deferred ( [ $value ] )>

=over

=item * C<$value>

Boolean value

=back

Accessor for the data stored in C<< qpsmtpd->connection->notes >>
( L<VM_DEFERRED|"CONSTANTS"> ) separated by C<$self->plugin_name()>.

Calls L<"vm_notes">.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_deferred
{
	my $self = shift;
	my $hash = $self->vm_notes (VM_DEFERRED) || {};
	my $plugin_name	= $self->plugin_name;

	if ( @_ )
	{
		$hash->{$plugin_name} = shift;
		$self->vm_notes(VM_DEFERRED, $hash);
	}
	return $hash->{$plugin_name};
}

=head2 vm_notify

=head2 vm_last_error

B<Call: $self-E<gt>vm_notify ( [ $value ] )>

B<Call: $self-E<gt>vm_last_error ( [ $value ] )>

=over

=item * C<$value>

Any value

=back

Accessors for the data stored in C<< qpsmtpd->connection->notes >>
( L<VM_DEFERRED|"CONSTANTS"> | L<VM_NOTIFY|"CONSTANTS"> | L<VM_LAST_ERROR|"CONSTANTS"> ).

Calls L<"vm_notes">.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_notify			{ shift()->vm_notes (VM_NOTIFY, @_) }
sub vm_last_error		{ shift()->vm_notes (VM_LAST_ERROR, @_) }

=head2 vm_notes

B<Call: $self-E<gt>vm_notes ( $key [, $value ] )>

=over

=item * C<$key>

String

=item * C<$value>

Any value

=back

Accessor for the data stored in C<< qpsmtpd->connection->notes >> ( C<$key> ).

Stores the new value if C<$key> and C<$value> are given.

B<Returns:>

the value	if C<$key> is given.

=cut

sub vm_notes
{
	my $self	= shift;
	my $key	= shift;

	@_		and	$self->qp->connection->notes ( $key, shift );

	return $self->qp->connection->notes ( $key );
}

=head1 LOGGING METHODS

=head2 vm_debug

B<Call: $self-E<gt>vm_debug ( [ @text ] )>

=over

=item * C<@text>

Array of strings

=back

Creates a line like C<--- >I<caller-subname>C<: @text>

Calls C<Qpsmtpd::Plugin::log> with the line as C<LOGDEBUG>.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_debug
{
	my ($self, @text) = @_;
	my $msg	= @text ? ': ' . join ( ' ', @text ) : '';
	my $sub	= (caller(1))[3];
	$sub =~ s/^Qpsmtpd::Plugin:://i;
	$self->log ( LOGDEBUG, '--- ' . $sub . $msg );
}

=head2 vm_error

B<Call: $self-E<gt>vm_error ( [ @text ] )>

=over

=item * C<@text>

Array of strings

=back

Creates a line like C<PLUGIN ERROR: >I<Qpsmtpd::Plugin::plugin_name>C<: @text>.
Uses L<VM_ERROR|"CONSTANTS">, if C<@text> is empty.

Calls C<Qpsmtpd::Plugin::log> with the line as C<LOGCRIT>.

Stores the line calling L<"vm_last_error">.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_error
{
	my ($self, @text) = @_;
	my $msg	= @text ? join ( ' ', @text ) : VM_ERROR;
	$msg = 'PLUGIN ERROR: ' . $self->plugin_name() . ': ' . $msg;
	$self->vm_last_error($msg);
	$self->log(LOGCRIT, $msg);
}

=head2 vm_log

B<Call: $self-E<gt>vm_log ( [ @text ] )>

=over

=item * C<@text>

Array of strings

=back

Creates a line like C<Plugin >I<Qpsmtpd::Plugin::plugin_name>C<: @text>

Calls C<Qpsmtpd::Plugin::log> with the line as C<LOGINFO>.

=cut

sub vm_log
{
	my ($self, @text) = @_;
	my $msg	= @text ? join ( ' ', @text ) : '';
	$self->log(LOGINFO, 'Plugin ' . $self->plugin_name() . ': ' . $msg);
}

=head1 RETURNING METHODS

=head2 vm_ok

B<Call: $self-E<gt>vm_declined ( [ $msg ] )>

=over

=item * C<$msg>

String

=back

B<Returns:> C<DECLINED> along with the optional C<$msg>.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_ok
{
	my ($self, $msg) = @_;
	return OK
}

=head2 vm_declined

B<Call: $self-E<gt>vm_declined ( [ $msg ] )>

=over

=item * C<$msg>

String

=back

B<Returns:> C<DECLINED> along with the optional C<$msg>.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_declined
{
	my ( $self, $msg )	= @_;
	return $msg ? (DECLINED, $msg) : ( DECLINED );
}

=head2 vm_deny

B<Call: $self-E<gt>vm_deny ( [ $msg ] )>

=over

=item * C<$msg>

String

=back

B<Returns:> C<DENY> along with the optional C<$msg>.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_deny
{
	my ( $self, $msg )	= @_;

	return $msg ? ( DENY, $msg ) : ( DENY );
}

=head2 vm_denysoft

B<Call: $self-E<gt>vm_denysoft ( [ $msg ] )>

=over

=item * C<$msg>

String

=back

B<Returns:> C<DENYSOFT> along with the optional C<$msg>
or L<VM_LATER|"CONSTANTS">.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_denysoft
{
	my ($self, $msg) = @_;
	return $msg ? (DENYSOFT, $msg) : (DENYSOFT, VM_LATER);
}

=head2 vm_denysoft_error

B<Call: $self-E<gt>vm_denysoft_error ( [ $msg ] )>

=over

=item * C<$msg>

String

=back

B<Returns:> C<DENYSOFT> along with the optional C<$msg>
or L<VM_LATER|"CONSTANTS">.

If the call to L<"vm_notify"> returns an entry for C<notify_email>,
this B<notify address is sent an email> with the error message stored
in L<"vm_last_error"> using C<hook_queue>.

=cut

sub vm_denysoft_error
{
	my ($self, $msg) = @_;

	my $notify = $self->vm_notify() || {};

	return $self->vm_denysoft($msg) unless $notify->{notify_email};

	$self->vm_log( "--- Notifying $notify->{notify_email}" );

    my $curr_transaction    = $self->qp->transaction;
	my $from        = $notify->{notify_from};
	my $from_name   = $notify->{notify_from_name} . " <$from>";

	my $sender      = Qpsmtpd::Address->new($from);
	my $recipient   = Qpsmtpd::Address->new($notify->{notify_email});
    my $smtp        = Net::SMTP->new('localhost');

    $smtp->mail($sender);
    $smtp->to($recipient);

    $smtp->data;
    $smtp->datasend("Subject: QPSMTPD Error in " . $self->plugin_name() . "\n");
    $smtp->datasend("From: $from_name\n");
    $smtp->datasend("To: $recipient\n");
    $smtp->datasend("Date: " . Date::Format::time2str('%a, %e %h %Y %X %z', time) . "\n");

	my $text	= '';

	$text	.= "\n";
	$text	.= "*SYSTEMERROR*\n";
	$text	.= "\n";
	$text	.= $self->vm_last_error() . "\n";
	$text	.= "\n";
	$text	.= 'log entry   : ' . scalar localtime() . ' ' . hostname() . '[' . $$ . ']' . "\n";

	my $o_sender	= $curr_transaction->sender() ? $curr_transaction->sender()->format() : '';
	my $o_rcpt		= '';

	foreach ( $curr_transaction->recipients() )
	{
		$o_rcpt	.= ', '		if $o_rcpt;
		$o_rcpt	.= $_->format();
	}

	$text	.= "sender      : $o_sender\n";
	$text	.= "recipient(s): $o_rcpt\n";
	$text	.= "\n";
	$text	.= "result      : DENYSOFT " . ( $msg || VM_LATER ) . "\n";
	$text	.= "\n";

	$smtp->datasend($text);
    $smtp->dataend;
    $smtp->quit;

	$self->vm_log ( "--- Finished notifying");

	return $self->vm_denysoft($msg);
}

=head1 HELPER METHODS

=head2 vm_die

B<Call: $self-E<gt>vm_die ( [ $msg ] )>

=over

=item * C<$msg>

String

=back

Calls L<"vm_error"> and dies with the optional C<$msg>
or L<VM_ERROR|"CONSTANTS">.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_die
{
	my ($self, $msg)	= @_;
	$msg ||= VM_ERROR;
	$self->vm_error($msg);
	die $msg;
}

=head2 vm_valid_email

B<Call: $self-E<gt>vm_valid_email ( $email_adr )>

=over

=item * C<$email_adr>

String

=back

Checks, if C<$email_adr> is wellformed.

B<Returns:> I<(three-state)>

0	if C<$email_adr> is uncomplete or contains spaces.
-1	if C<$email_adr> contains dangerous chars.
1	on success.

=for html <A HREF="#__index__"><SMALL>go top</SMALL></A>

=cut

sub vm_valid_email
{
	my ($self, $email_adr) = @_;

	$email_adr ||= '';

	unless ($email_adr =~ /^[^@]+\@[^@]+$/ )						{ return 0; }		#	is uncomplete
	if ( $email_adr =~ / / )											{ return 0; }		#	contains spaces
	if ( $email_adr =~ /[^A-Z0-9a-z_\.\@-]/ )						{ return -1; }		#	has dangerous chars

	return 1;																						#	ok
}

=head2 vm_dump

B<Call: $self-E<gt>vm_dump ( $values [, @names ] )>

=over

=item * C<$values>

Single reference to a value or reference to an array of values

=item * C<@names>

Array of strings (names of the values)

=back

B<Returns:> a text created by a C<Data::Dumper> object using the params.

It uses the symbol substitution provided by C<Data::Dumper>.

Calling examples:

	my $text = $self->vm_dump ( $config, qw( *config ) );

	# gives:
	#
	# %config = (
	#             'email_address' => undef,
	#             'email_enabled' => 'is_enabled',
	#             'email_table' => 'emailtable',
	#             'email_user' => 'local_part',
	#             'domain_domain' => 'domain',
	#             'email_domain' => 'domain',
	#             'email_enabled_value' => 'yes',
	#             'domain_table' => 'emailtable'
	#           );

	my $text = $self->vm_dump
	            (
	               [ $user, $host, $delivery, $config ],
	               qw( user host delivery *config )
	            );

	# gives:
	#
	# $user = 'ernesto';
	# $host = 'dienstleistung-kultur.de';
	# $delivery = 'ernesto@dienstleistung-kultur.de';
	# %config = ( same as above... )

=cut

sub vm_dump ($$;@)
{
	my ( $self, $values, @names )	= @_;

	my @d_values	= ();

	if ( ref $values eq 'ARRAY' )
	{
		@d_values	= @$values;
	}
	else
	{
		@d_values	= ( $values );
	}

	if ( @names )
	{
		"\n"  . new Data::Dumper ( [ @d_values ], [ @names ] )->Dump;
	}
	else
	{
		"\n"  . new Data::Dumper ( [ @d_values ] )->Dump;
	}
}


=head1 HOOKS None

=head1 CREDITS

Thanks to Ask Bjoern Hansen for qpsmtpd.

http://smtpd.develooper.com/

=head1 COPYRIGHT

(c) Ernesto 2007, ernesto@dienstleistung-kultur.de

http://dienstleistung-kultur.de/qpsmtpd/

=head1 LICENCE

As per the qpsmtpd license.

=cut

# vim: ft=perl
